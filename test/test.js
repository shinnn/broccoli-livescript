'use strict';

var path = require('path');

var Builder = require('broccoli').Builder;
var liveScript = require('..');
var readFile = require('fs-readfile-promise');
var rimraf = require('rimraf');
var test = require('tape');
var VERSION = require('LiveScript').VERSION;

rimraf.sync('tmp');

test('broccoli-ivescript', function(t) {
  t.plan(4);

  new Builder(liveScript('test/fixture')).build().then(function(dir) {
    return readFile(path.join(dir.directory, 'fixture.js'), 'utf8');
  }, t.fail).then(function(content) {
    var expected = [
      '// Generated by LiveScript ' + VERSION,
      '(function(){',
      '  [\'ha\', \'ha\', \'ha\'];',
      '}).call(this);\n'
    ].join('\n');

    t.equal(content, expected, 'should compile LiveScript.');
  }, t.fail);

  new Builder(liveScript('test/fixture', {
    bare: true,
    header: false
  })).build().then(function(dir) {
    return readFile(path.join(dir.directory, 'fixture.js'), 'utf8');
  }, t.fail).then(function(content) {
    t.equal(content, '[\'ha\', \'ha\', \'ha\'];', 'should support LiveScript options.');
  }, t.fail);

  var options = {bare: false};

  new Builder(liveScript('test/fixture-failure', options)).build().then(t.notOk, function(err) {
    t.equal(
      err.name,
      'SyntaxError',
      'should fail to compile the file when it is not a valid LiveScript file.'
    );
    t.deepEqual(options, {bare: false}, 'should not modify the original option object.');
  });
});
